{"version":3,"sources":["containers/Common/NetworkGraph/components/Node/index.js","containers/Common/NetworkGraph/components/Link/index.js","containers/Common/NetworkGraph/components/Universe/index.js","containers/Common/NetworkGraph/index.js"],"names":["Node","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickHandler","bind","assertThisInitialized","doubleClickHandler","mouseOverHandler","mouseOutHandler","clickTimeout","props","onClick","type","data","id","onDoubleClick","event","x","onMouseOver","text","onMouseOut","_this$props","className","radius","color","y","style","active","react_default","a","createElement","transform","concat","cursor","opacity","r","fill","getThumbnail","Component","img","shortText","textStyle","xlinkHref","clipPath","width","dx","dy","fontSize","defaultProps","stroke","strokeWidth","fontWeight","Link","d","pointer","getPointer","markerEnd","getLabel","viewBox","refX","arrowOffset","refY","markerWidth","markerHeight","orient","href","startOffset","pointerEvents","textAnchor","Universe","state","objectSpread","getArcPath","getLinks","nextProps","setState","source","target","links","filter","link","map","l","scale","sweep","clockwise","arguments","length","undefined","x1","y1","x2","y2","siblings","linkIdx","scaleOrdinal","domain","range","arcScale","dr","Math","sqrt","_this2","_this$state","nodes","reduce","acc","idx","push","components_Link","key","node","components_Node","assign","NetworkGraph","selectedNode","activeNodes","simulation","initSimulation","height","k","tooltip","top","left","initZoomHandler","updateData","updateSimulation","onTick","svg","React","createRef","interval","fps","millis","Date","now","getNeighborNodes","current","clientWidth","clientHeight","updates","diff","prevProps","added","removed","JSON","stringify","children","linkForce","forceLink","strength","distance","forceSimulation","force","_this3","select","zoomHandler","zoom","on","_this4","forEach","n","sourceNode","targetNode","_this5","attraceForceStrength","chargeStrength","collisionRadiusOffset","collisionStrength","animation","velocityDecay","alphaStart","cluster","clusterRadiusScale","clusterForceStrength","forceCenter","forceManyBody","forceCollide","clusters","uniqBy","arr","cos","PI","random","sin","alpha","applyClusterForce","alphaTarget","restart","tick","e","currentTime","payload","clientY","clientX","neighbors","_this$state2","indexOf","ref","components_Universe","vx","vy","containsNode","memoize","prevNodes","newNodes"],"mappings":"kQAKMA,cACJ,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACpBA,EAAKU,mBAAqBV,EAAKU,mBAAmBF,KAAxBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAC1BA,EAAKW,iBAAmBX,EAAKW,iBAAiBH,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACxBA,EAAKY,gBAAkBZ,EAAKY,gBAAgBJ,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAEvBA,EAAKa,aAAe,KAPPb,8EAWbG,KAAKW,MAAMC,QAAQ,CACjBC,KAAM,OACNC,KAAMd,KAAKW,MAAMI,kDAmBff,KAAKW,MAAMK,eACbhB,KAAKW,MAAMK,cAAc,CACvBH,KAAM,OACNC,KAAMd,KAAKW,MAAMI,8CAKLE,EAAOC,GACnBlB,KAAKW,MAAMQ,aACbnB,KAAKW,MAAMQ,YAAY,CACrBN,KAAM,OACNC,KAAM,CACJC,GAAIf,KAAKW,MAAMI,GACfK,KAAMpB,KAAKW,MAAMS,KACjBP,KAAMb,KAAKW,MAAME,MAEnBI,kDAKWA,GACXjB,KAAKW,MAAMU,YACbrB,KAAKW,MAAMU,WAAW,CACpBR,KAAM,OACNC,KAAM,CACJC,GAAIf,KAAKW,MAAMI,GACfK,KAAMpB,KAAKW,MAAMS,KACjBP,KAAMb,KAAKW,MAAME,MAEnBI,2CAKI,IAAAK,EASJtB,KAAKW,MAPPY,EAFMD,EAENC,UACAC,EAHMF,EAGNE,OACAC,EAJMH,EAING,MACAP,EALMI,EAKNJ,EACAQ,EANMJ,EAMNI,EACAC,EAPML,EAONK,MACAC,EARMN,EAQNM,OAEF,OACEC,EAAAC,EAAAC,cAAA,KACER,UAAWA,EACXS,UAAS,aAAAC,OAAef,EAAf,KAAAe,OAAoBP,EAApB,KACTd,QAASZ,KAAKI,aACduB,MAAO,CACLO,OAAQ,UACRC,QAASP,EAAS,EAAI,IAExBT,YAAanB,KAAKQ,iBAClBa,WAAYrB,KAAKS,iBAEjBoB,EAAAC,EAAAC,cAAA,UACEK,EAAGZ,EACHa,KAAMZ,EACNE,MAAOA,IAGPW,EAAatC,KAAKW,eAjGT4B,aAwGbD,EAAe,SAAC3B,GAAU,IACtBI,EAA0CJ,EAA1CI,GAAIyB,EAAsC7B,EAAtC6B,IAAKhB,EAAiCb,EAAjCa,OAAQiB,EAAyB9B,EAAzB8B,UAAWC,EAAc/B,EAAd+B,UACpC,OAAIF,EAEAX,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEhB,GAAE,QAAAkB,OAAUlB,IAEZc,EAAAC,EAAAC,cAAA,UACEK,EAAGZ,EAAS,MAKlBK,EAAAC,EAAAC,cAAA,SACEY,UAAWH,EACXI,SAAQ,aAAAX,OAAelB,EAAf,KACRG,GAAIM,EACJE,GAAIF,EACJqB,MAAgB,EAATrB,KAMXK,EAAAC,EAAAC,cAAA,QACEe,IAAKtB,EAAS,EACduB,GAAIL,EAAUM,SAAW,EACzBrB,MAAOe,GAEND,IAMT7C,EAAKqD,aAAe,CAClB1B,UAAW,OACXC,OAAQ,GACRC,MAAO,UACPE,MAAO,CACLS,EAAG,GACHc,OAAQ,UACRC,YAAa,OAEfT,UAAW,CACTM,SAAU,GACVX,KAAM,OACNc,YAAa,MACbC,WAAY,UAEdlC,EAAG,EACHQ,EAAG,EACHE,QAAQ,GAgCKhC,QChMTyD,mLACM,IAAA/B,EACkCtB,KAAKW,MAAvC2C,EADAhC,EACAgC,EAAGC,EADHjC,EACGiC,QAAS5B,EADZL,EACYK,MAAOZ,EADnBO,EACmBP,GAAIa,EADvBN,EACuBM,OAC/B,OACEC,EAAAC,EAAAC,cAAA,KACEJ,MAAO,CACLQ,QAASP,EAAS,EAAI,KAGtB4B,EAAWxD,KAAKW,OAClBkB,EAAAC,EAAAC,cAAA,QACEhB,GAAIA,EACJY,MAAOA,EACP2B,EAAGA,EACHG,UAAWF,EAAO,QAAAtB,OAAWlB,EAAX,aAA2BwC,IAE7CG,EAAS1D,KAAKW,eAhBL4B,aAsBbiB,EAAa,SAAC7C,GAClB,GAAIA,EAAM4C,QACR,OACE1B,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,UACEhB,GAAE,GAAAkB,OAAKtB,EAAMI,GAAX,YACF4C,QAAQ,aACRC,KAAMjD,EAAMkD,YACZC,KAAK,KACLC,YAAY,IACZC,aAAa,IACbC,OAAO,QAEPpC,EAAAC,EAAAC,cAAA,QACEuB,EAAE,iBACFjB,KAAK,OACLV,MAAO,CACLQ,QAAS,QAQjBuB,EAAW,SAAC/C,GAChB,GAAIA,EAAME,KACR,OACEgB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,YACEe,GAAI,EACJC,GAAI,EACJmB,KAAI,IAAAjC,OAAMtB,EAAMI,IAChBoD,YAAY,MACZxC,MAAOhB,EAAM+B,WAEZ/B,EAAME,QAOjBwC,EAAKJ,aAAe,CAClBtB,MAAO,CACLwB,YAAa,IACbd,KAAM,OACNa,OAAQ,wBAEVR,UAAW,CACT0B,cAAe,OACfC,WAAY,SACZhC,KAAM,QAERkB,SAAS,EACT3B,QAAQ,GAaKyB,QCrFTiB,cACJ,SAAAA,EAAa3D,GAAO,IAAAd,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsE,IAClBzE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwE,GAAAnE,KAAAH,KAAMW,KACD4D,MAALzE,OAAA0E,EAAA,EAAA1E,CAAA,GACKD,EAAKc,OAGVd,EAAK4E,WAAa5E,EAAK4E,WAAWpE,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAK6E,SAAW7E,EAAK6E,SAASrE,KAAdP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAPEA,yFAUO8E,GACzB3E,KAAK4E,SAAL9E,OAAA0E,EAAA,EAAA1E,CAAA,GAAmB6E,qCAGXE,EAAQC,GAChB,OAAO9E,KAAKuE,MAAMQ,MACfC,OACC,SAAAC,GAAI,OACFA,EAAKJ,OAAO9D,KAAO8D,EAAO9D,IAC1BkE,EAAKH,OAAO/D,KAAO+D,EAAO/D,KAE7BmE,IAAI,SAAAC,GAAC,OAAIA,EAAEtE,0CAGJoE,GAAwB,IAmB5BG,EACAC,EApBUC,IAAkBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAC5BG,EAAKJ,EAAYL,EAAKJ,OAAO3D,EAAI+D,EAAKH,OAAO5D,EAC7CyE,EAAKL,EAAYL,EAAKJ,OAAOnD,EAAIuD,EAAKH,OAAOpD,EAC7CkE,EAAKN,EAAYL,EAAKH,OAAO5D,EAAI+D,EAAKJ,OAAO3D,EAC7C2E,EAAKP,EAAYL,EAAKH,OAAOpD,EAAIuD,EAAKJ,OAAOnD,EAC7CoB,EAAK8C,EAAKF,EACV3C,EAAK8C,EAAKF,EACVG,EAAW9F,KAAK0E,SAASO,EAAKJ,OAAQI,EAAKH,QAWzCiB,EAHWC,cACdC,OAAOH,GACPI,MAAM,CAAC,EARS,GASHC,CAASlB,EAAKpE,MAGd,IAAZkF,GACFV,EAAQ,EACRD,EAAQ,GAECW,EAAU,IAAM,GACzBV,EAAQ,EACRD,EAAQW,EAAU,GACTA,EAAU,IAAM,IACzBV,EAAQ,EACRD,EAAQW,EAAU,EAAI,GAExB,IAAMK,EACJC,KAAKC,KAAKxD,EAAKA,EAAKC,EAAKA,IAAO,EAAK,IAAqBqC,EAAQ,IACpE,UAAAnD,OAAWyD,EAAX,KAAAzD,OAAiB0D,EAAjB,KAAA1D,OAA4B,IAALmE,EAAvB,KAAAnE,OACE,IADiCmE,EAAnC,KAAAnE,OAxBgB,EAwBhB,MAAAA,OAvBe,EAuBf,MAAAA,OACoCoD,EADpC,KAAApD,OAC6C2D,EAD7C,KAAA3D,OACmD4D,oCAK7C,IAAAU,EAAAvG,KAAAwG,EACiBxG,KAAKuE,MAAtBkC,EADAD,EACAC,MAAO1B,EADPyB,EACOzB,MACf,OACElD,EAAAC,EAAAC,cAAA,KACER,UAAWvB,KAAKW,MAAMY,UACtBS,UAAWhC,KAAKW,MAAMqB,WAEtBH,EAAAC,EAAAC,cAAA,KAAGR,UAAU,SAETwD,EAAM2B,OAAO,SAACC,EAAK1B,EAAM2B,GACvB,MAA2B,kBAAhB3B,EAAKJ,QAA8C,kBAAhBI,EAAKH,QACjD6B,EAAIE,KACFhF,EAAAC,EAAAC,cAAC+E,EAAD,CACEC,IAAKH,EACLtD,EAAGiD,EAAK9B,WAAWQ,GACnBtD,MAAOsD,EAAKtD,MACZZ,GAAIkE,EAAKlE,GACTF,KAAMoE,EAAKpE,KACXgD,YAAkC,KAArBoB,EAAKH,OAAOtD,OACzBI,OAAQqD,EAAKrD,UAGV+E,GAEFA,GACN,KAGP9E,EAAAC,EAAAC,cAAA,KAAGR,UAAU,SAETkF,EAAMvB,IAAI,SAAC8B,EAAMJ,GAAP,OACR/E,EAAAC,EAAAC,cAACkF,EAADnH,OAAAoH,OAAA,CACEH,IAAKH,EACLhG,QAAS2F,EAAK5F,MAAMC,QACpBI,cAAeuF,EAAK5F,MAAMK,cAC1BG,YAAaoF,EAAK5F,MAAMQ,YACxBE,WAAYkF,EAAK5F,MAAMU,YACnB2F,eAtGGzE,aAgHvB+B,EAASrB,aAAe,CACtB1B,UAAW,WACXkF,MAAO,GACP1B,MAAO,IAWMT,QCpHT6C,sBACJ,SAAAA,EAAaxG,GAAO,IAAAd,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmH,IAClBtH,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqH,GAAAhH,KAAAH,KAAMW,KACD4D,MAAQ,CACXkC,MAAO,GACP1B,MAAO,GACPqC,aAAc,KACdC,YAAa,GACbC,WAAYzH,EAAK0H,iBACjB1E,MAAO,IACP2E,OAAQ,IACRxF,UAAW,CACTd,EAAG,EACHQ,EAAG,EACH+F,EAAG,GAELC,QAAS,CACPtG,KAAM,GACNO,MAAO,CACLQ,QAAS,EACTwF,IAAK,EACLC,KAAM,KAIZ/H,EAAK0H,eAAiB1H,EAAK0H,eAAelH,KAApBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACtBA,EAAKgI,gBAAkBhI,EAAKgI,gBAAgBxH,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKiI,WAAajI,EAAKiI,WAAWzH,KAAhBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAClBA,EAAKkI,iBAAmBlI,EAAKkI,iBAAiB1H,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACxBA,EAAKmI,OAASnI,EAAKmI,OAAO3H,KAAZP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACdA,EAAKoI,IAAMC,IAAMC,YACjBtI,EAAK4G,MAAQ,GACb5G,EAAKkF,MAAQ,GAGblF,EAAKuI,SAAY,IAAOvI,EAAKc,MAAM0H,IACnCxI,EAAKyI,OAASC,KAAKC,MAGnB3I,EAAKW,iBAAmBX,EAAKW,iBAAiBH,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACxBA,EAAKY,gBAAkBZ,EAAKY,gBAAgBJ,KAArBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KACvBA,EAAKO,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KAGpBA,EAAK4I,iBAAmB5I,EAAK4I,iBAAiBpI,KAAtBP,OAAAQ,EAAA,EAAAR,QAAAQ,EAAA,EAAAR,CAAAD,KA3CNA,mFA8CC,IAAA0G,EAAAvG,KACnBA,KAAK6H,kBACL7H,KAAK4E,SAAS,CACZ/B,MAAO7C,KAAKiI,IAAIS,QAAQC,YACxBnB,OAAQxH,KAAKiI,IAAIS,QAAQE,cACxB,WACD,IAAMC,EAAUC,EAAKvC,EAAKE,MAAOF,EAAK5F,MAAM8F,OAC5CF,EAAKuB,WAAWe,GAChBtC,EAAKwB,gEAIWgB,GAClB/I,KAAKoI,SAAY,IAAOpI,KAAKW,MAAM0H,IAEnC,IAAMQ,EAAUC,EAAKC,EAAUtC,MAAOzG,KAAKW,MAAM8F,QAC7CoC,EAAQG,MAAMxD,OAAS,GAAKqD,EAAQI,QAAQzD,OAAS,KACvDxF,KAAK8H,WAAWe,GAChB7I,KAAK+H,oBAKLmB,KAAKC,UAALrJ,OAAA0E,EAAA,EAAA1E,CAAA,GACKiJ,EADL,CAEEtC,MAAO,KACP1B,MAAO,KACPqE,SAAU,UAEZF,KAAKC,UAALrJ,OAAA0E,EAAA,EAAA1E,CAAA,GACKE,KAAKW,MADV,CAEE8F,MAAO,KACP1B,MAAO,KACPqE,SAAU,SAGZpJ,KAAK+H,4DAKP,IAAMsB,EAAYC,cACfvI,GAAG,SAAAkE,GAAI,OAAIA,EAAKlE,KAChBwI,SAAS,SAAAtE,GAAI,OAAIA,EAAKsE,WACtBC,SAAS,SAAAvE,GAAI,OAAIA,EAAKuE,WAGzB,OAFmBC,cAAkBC,MAAM,OAAQL,6CAKlC,IAAAM,EAAA3J,KAGXiI,EAAM2B,YAAO,aACbC,EAAcC,cAAOC,GAAG,OAAQ,WACpCJ,EAAK/E,SAAS,CACZ5C,UAAWf,IAAMe,cAGrBiG,EAAI9H,KAAK0J,GAAaE,GAAG,gBAAiB,yCAGhCjB,GAAM,IAAAkB,EAAAhK,KACR+E,EAAU/E,KAAKW,MAAfoE,MACR/E,KAAK+E,MAAQ,GAGb+D,EAAKG,QAAQgB,QAAQ,SAAAjD,GACnBgD,EAAKvD,MAAQuD,EAAKvD,MAAMzB,OACtB,SAAAkF,GAAC,QAAMA,EAAEnJ,KAAOiG,EAAKjG,IAAMmJ,EAAErJ,OAASmG,EAAKnG,UAK/CiI,EAAKE,MAAMiB,QAAQ,SAAAjD,GAAI,OAAIgD,EAAKvD,MAAMI,KAAKG,KAG3CjC,EAAMkF,QAAQ,SAAAhF,GACZ,IAAMkF,EAAaH,EAAKvD,MAAMzB,OAC5B,SAAAgC,GAAI,OAAIA,EAAKjG,KAAOkE,EAAKJ,SACzB,GACIuF,EAAaJ,EAAKvD,MAAMzB,OAC5B,SAAAgC,GAAI,OAAIA,EAAKjG,KAAOkE,EAAKH,SACzB,GACEqF,GAAcC,GAChBJ,EAAKjF,MAAM8B,KAAX/G,OAAA0E,EAAA,EAAA1E,CAAA,GACKmF,EADL,CAEEJ,OAAQsF,EACRrF,OAAQsF,kDAMI,IAAAC,EAAArK,KAAAsB,EAYdtB,KAAKW,MAVP2J,EAFgBhJ,EAEhBgJ,qBACAC,EAHgBjJ,EAGhBiJ,eACAC,EAJgBlJ,EAIhBkJ,sBACAC,EALgBnJ,EAKhBmJ,kBACAC,EANgBpJ,EAMhBoJ,UACAC,EAPgBrJ,EAOhBqJ,cACAC,EARgBtJ,EAQhBsJ,WACAC,EATgBvJ,EAShBuJ,QACAC,EAVgBxJ,EAUhBwJ,mBACAC,EAXgBzJ,EAWhByJ,qBAXgBvE,EAaoBxG,KAAKuE,MAAnC+C,EAbUd,EAaVc,WAAYE,EAbFhB,EAaEgB,OAAQ3E,EAbV2D,EAaU3D,MAkB5B,GAhBAyE,EACGb,MAAMzG,KAAKyG,OACXsD,GAAG,OAAQ/J,KAAKgI,QACnBV,EAAWoC,MAAM,QAAQ3E,MAAM/E,KAAK+E,OACpCuC,EACGoC,MAAM,SAAUsB,YAAYnI,EAAQ,EAAG2E,EAAS,IAChDkC,MAAM,eAAgBuB,cAAgB1B,SAASe,IAC/CZ,MAAM,SAAUuB,cAAgB1B,SAASgB,IACzCb,MACC,YACAwB,cACG1J,OAAO,SAAAwF,GAAI,OAAIA,EAAKxF,OAASgJ,IAC7BjB,SAASkB,IAIZI,EAAS,CACX,IAAMM,EAAW,GACCC,IAAOpL,KAAKyG,MAAO,QAAQvB,IAAI,SAAArE,GAAI,OAAIA,EAAKA,OAEpDoJ,QAAQ,SAACpJ,EAAM+F,EAAKyE,GAC5B,IAAKF,EAAStK,GAAO,CACnB,IAAMW,EAASqB,EAAQ2E,EAASA,EAASsD,EAAqBjI,EAAQiI,EACtEK,EAAStK,GAAQ,CACfK,EAAGmF,KAAKiF,KAAK1E,EAAM,GAAKyE,EAAI7F,OAAS,EAAIa,KAAKkF,IAAM/J,EAASqB,EAAQ,EAAIwD,KAAKmF,SAC9E9J,EAAG2E,KAAKoF,KAAK7E,EAAM,GAAKyE,EAAI7F,OAAS,EAAIa,KAAKkF,IAAM/J,EAASgG,EAAS,EAAInB,KAAKmF,SAC/EhK,aAKN8F,EAAWoC,MAAM,UAAW,SAAAgC,GAAK,OAC/BC,EAAkBD,EAAOrB,EAAK5D,MAAO0E,EAAUJ,UAGjDzD,EAAWoC,MAAM,UAAW,MAS9B,GANApC,EACGoE,MAAMd,GACNgB,YAAY,GACZjB,cAAcA,GACdkB,WAEEnB,EACH,KAAOpD,EAAWoE,SAAW,KAC3BpE,EAAWwE,sCAKTC,GAEN,IAAMC,EAAczD,KAAKC,MACrBwD,EAAchM,KAAKsI,OAAStI,KAAKoI,WACnCpI,KAAKsI,OAAS0D,EACdhM,KAAK4E,SAAS,CACZ6B,MAAOzG,KAAKyG,MACZ1B,MAAO/E,KAAK+E,mDAMhB/E,KAAK4E,SAAS,CACZ8C,QAAS,CACP/F,MAAO,CACLQ,QAAS,+CAMC8J,GAAS,IACjBhL,EAAsBgL,EAAtBhL,MAAOJ,EAAeoL,EAAfpL,KAAMC,EAASmL,EAATnL,KACjBM,EAAO,GACE,SAATP,EACFO,EAAI,IAAAa,OAAOnB,EAAKD,KAAZ,MAAAoB,OAAqBnB,EAAKM,MACZ,SAATP,IACTO,EAAI,GAAAa,OAAMnB,EAAKD,OAEjBb,KAAK4E,SAAS,CACZ8C,QAAS,CACPtG,OACAO,MAAO,CACLQ,QAAS,EACTwF,IAAK1G,EAAMiL,QAAU,GACrBtE,KAAM3G,EAAMkL,QAAU,4CAMhBlL,GACRjB,KAAKuE,MAAM6C,eAAiBnG,EAAMH,KACpCd,KAAK4E,SAAS,CACZwC,aAAc,KACdC,YAAa,KAGfrH,KAAK4E,SAAS,CACZwC,aAAcnG,EAAMH,KACpBuG,YAAarH,KAAKyI,iBAAiBxH,EAAMH,iDAK7BkG,GAChB,OAAOhH,KAAK+E,MAAM2B,OAChB,SAAC0F,EAAWnH,GAMV,OALIA,EAAKH,OAAO/D,KAAOiG,EACrBoF,EAAUvF,KAAK5B,EAAKJ,OAAO9D,IAClBkE,EAAKJ,OAAO9D,KAAOiG,GAC5BoF,EAAUvF,KAAK5B,EAAKH,OAAO/D,IAEtBqL,GAET,qCAIM,IAAAC,EACkDrM,KAAKuE,MAAvDvC,EADAqK,EACArK,UAAW0F,EADX2E,EACW3E,QAASN,EADpBiF,EACoBjF,aAAcC,EADlCgF,EACkChF,YAGpCZ,EAAQzG,KAAKuE,MAAMkC,MAAMvB,IAAI,SAAA8B,GAAI,OAAAlH,OAAA0E,EAAA,EAAA1E,CAAA,GAClCkH,EADkC,CAErCpF,OAAyB,OAAjBwF,GAAyBJ,EAAKjG,KAAOqG,GAAgBC,EAAYiF,QAAQtF,EAAKjG,KAAO,MAGzFgE,EAAQ/E,KAAKuE,MAAMQ,MAAMG,IAAI,SAAAD,GAAI,OAAAnF,OAAA0E,EAAA,EAAA1E,CAAA,GAClCmF,EADkC,CAErCrD,OACmB,OAAjBwF,GACAnC,EAAKJ,OAAO9D,KAAOqG,GACnBnC,EAAKH,OAAO/D,KAAOqG,MAGvB,OACEvF,EAAAC,EAAAC,cAAA,OACER,UAAU,eACVI,MAAO,CACLkB,MAAO,OACP2E,OAAQ,SAGTxH,KAAKW,MAAMyI,SACZvH,EAAAC,EAAAC,cAAA,OACER,UAAU,WACVsB,MAAM,OACN2E,OAAO,OACP+E,IAAKvM,KAAKiI,KAEVpG,EAAAC,EAAAC,cAACyK,EAAD,CACE/F,MAAOA,EACP1B,MAAOA,EACP/C,UAAS,aAAAC,OACMD,EAAUd,EADhB,KAAAe,OACqBD,EAAUN,EAD/B,YAAAO,OAC2CD,EAAUyF,EADrD,KAGT7G,QAASZ,KAAKI,aACdY,cAAehB,KAAKW,MAAMK,cAC1BG,YAAanB,KAAKQ,iBAClBa,WAAYrB,KAAKS,mBAIrBoB,EAAAC,EAAAC,cAAA,QACER,UAAU,qBACVI,MAAO+F,EAAQ/F,OAEd+F,EAAQtG,cAtUQmB,cA8UrBoJ,EAAoB,SAACD,EAAOjF,EAAO0E,EAAU5B,GACjD9C,EAAMwD,QAAQ,SAAAjD,GACZ,IAAM6D,EAAUM,EAASnE,EAAKnG,MAC9B,GAAIgK,EAAQ3J,IAAM8F,EAAK9F,GAAK2J,EAAQnJ,IAAMsF,EAAKtF,EAAG,CAChD,IAAM+F,EAAIiE,EAAQnC,EAClBvC,EAAKyF,KAAOzF,EAAK9F,EAAI2J,EAAQ3J,GAAKuG,EAClCT,EAAK0F,KAAO1F,EAAKtF,EAAImJ,EAAQnJ,GAAK+F,MAKlCkF,EAAeC,YAAQ,SAAC5F,EAAMP,GAAP,OAC3BA,EAAMC,OAAO,SAACC,EAAKuD,GAIjB,OAHIA,EAAEnJ,KAAOiG,EAAKjG,IAChB4F,EAAIE,KAAKqD,GAEJvD,GACN,IAAInB,OAAS,EACZ,EACA,IAGAsD,EAAO8D,YAAQ,SAACC,EAAWC,GAAZ,MAA0B,CAC7C7D,QAAS4D,EAAU7H,OAAO,SAAAgC,GAAI,OAAqC,IAAjC2F,EAAa3F,EAAM8F,KACrD9D,MAAO8D,EAAS9H,OAAO,SAAAgC,GAAI,OAAsC,IAAlC2F,EAAa3F,EAAM6F,QAGpD1F,EAAalE,aAAe,CAC1BwD,MAAO,GACP1B,MAAO,GACPuF,qBAAsB,GACtBC,gBAAiB,GACjBC,sBAAuB,GACvBC,kBAAmB,GACnBC,WAAW,EACXG,SAAS,EACTxC,IAAK,GACLuC,WAAY,EACZD,cAAe,GACfG,mBAAoB,EACpBC,qBAAsB,IAqBT5D","file":"static/js/2.3d0f787e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\n// import './style.css'\n\nclass Node extends Component {\n  constructor () {\n    super()\n    this.clickHandler = this.clickHandler.bind(this)\n    this.doubleClickHandler = this.doubleClickHandler.bind(this)\n    this.mouseOverHandler = this.mouseOverHandler.bind(this)\n    this.mouseOutHandler = this.mouseOutHandler.bind(this)\n    // for click vs dblclick\n    this.clickTimeout = null\n  }\n\n  clickHandler () {\n    this.props.onClick({\n      type: 'NODE',\n      data: this.props.id\n    })\n    // if (this.clickTimeout) {\n    //   clearTimeout(this.clickTimeout)\n    //   this.clickTimeout = null\n    //   this.doubleClickHandler()\n    // } else {\n    //   this.clickTimeout = setTimeout(() => {\n    //     if (this.props.onClick) {\n    //       this.props.onClick({\n    //         type: 'NODE',\n    //         data: this.props.id\n    //       })\n    //     }\n    //   }, 300)\n    // }\n  }\n\n  doubleClickHandler () {\n    if (this.props.onDoubleClick) {\n      this.props.onDoubleClick({\n        type: 'NODE',\n        data: this.props.id\n      })\n    }\n  }\n\n  mouseOverHandler (event, x) {\n    if (this.props.onMouseOver) {\n      this.props.onMouseOver({\n        type: 'NODE',\n        data: {\n          id: this.props.id,\n          text: this.props.text,\n          type: this.props.type\n        },\n        event\n      })\n    }\n  }\n\n  mouseOutHandler (event) {\n    if (this.props.onMouseOut) {\n      this.props.onMouseOut({\n        type: 'NODE',\n        data: {\n          id: this.props.id,\n          text: this.props.text,\n          type: this.props.type\n        },\n        event\n      })\n    }\n  }\n\n  render () {\n    const {\n      className,\n      radius,\n      color,\n      x,\n      y,\n      style,\n      active\n    } = this.props\n    return (\n      <g\n        className={className}\n        transform={`translate(${x},${y})`}\n        onClick={this.clickHandler}\n        style={{\n          cursor: 'pointer',\n          opacity: active ? 1 : 0.1\n        }}\n        onMouseOver={this.mouseOverHandler}\n        onMouseOut={this.mouseOutHandler}\n      >\n        <circle\n          r={radius}\n          fill={color}\n          style={style}\n        />\n        {\n          getThumbnail(this.props)\n        }\n      </g>\n    )\n  }\n}\n\nconst getThumbnail = (props) => {\n  const { id, img, radius, shortText, textStyle } = props\n  if (img) {\n    return (\n      <g>\n        <defs>\n          <clipPath\n            id={`clip_${id}`}\n          >\n            <circle\n              r={radius - 1}\n              // fill={bgColor}\n            />\n          </clipPath>\n        </defs>\n        <image\n          xlinkHref={img}\n          clipPath={`url(#clip_${id})`}\n          x={-radius}\n          y={-radius}\n          width={radius * 2}\n        />\n      </g>\n    )\n  } else {\n    return (\n      <text\n        dx={-radius / 2}\n        dy={textStyle.fontSize / 2}\n        style={textStyle}\n      >\n        {shortText}\n      </text>\n    )\n  }\n}\n\nNode.defaultProps = {\n  className: 'node',\n  radius: 35,\n  color: '#FFFFFF',\n  style: {\n    r: 35,\n    stroke: '#375E97',\n    strokeWidth: '3px'\n  },\n  textStyle: {\n    fontSize: 15,\n    fill: '#fff',\n    strokeWidth: '3px',\n    fontWeight: 'normal'\n  },\n  x: 0,\n  y: 0,\n  active: true\n}\n\nNode.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n  text: PropTypes.string,\n  shortText: PropTypes.string,\n  className: PropTypes.string,\n  img: PropTypes.string,\n  color: PropTypes.string,\n  radius: PropTypes.number,\n  style: PropTypes.shape({\n    r: PropTypes.number,\n    stroke: PropTypes.string,\n    strokeWidth: PropTypes.string\n  }),\n  textStyle: PropTypes.shape({\n    fontSize: PropTypes.number,\n    fill: PropTypes.string,\n    strokeWidth: PropTypes.string,\n    fontWeight: PropTypes.string\n  }),\n  x: PropTypes.number,\n  y: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  onMouseOut: PropTypes.func,\n  onMouseOver: PropTypes.func,\n  active: PropTypes.bool\n}\n\nexport default Node\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nclass Link extends Component {\n  render () {\n    const { d, pointer, style, id, active } = this.props\n    return (\n      <g\n        style={{\n          opacity: active ? 1 : 0.1\n        }}\n      >\n        { getPointer(this.props) }\n        <path\n          id={id}\n          style={style}\n          d={d}\n          markerEnd={pointer ? `url(#${id}_pointer)` : pointer}\n        />\n        { getLabel(this.props) }\n      </g>\n    )\n  }\n}\n\nconst getPointer = (props) => {\n  if (props.pointer) {\n    return (\n      <defs>\n        <marker\n          id={`${props.id}_pointer`}\n          viewBox='0 -5 10 10'\n          refX={props.arrowOffset}\n          refY='-2'\n          markerWidth='6'\n          markerHeight='6'\n          orient='auto'\n        >\n          <path\n            d='M0,-5L10,0L0,5'\n            fill='#666'\n            style={{\n              opacity: 1\n            }} />\n        </marker>\n      </defs>\n    )\n  }\n}\n\nconst getLabel = (props) => {\n  if (props.type) {\n    return (\n      <text>\n        <textPath\n          dx={0}\n          dy={5}\n          href={`#${props.id}`}\n          startOffset='50%'\n          style={props.textStyle}\n        >\n          {props.type}\n        </textPath>\n      </text>\n    )\n  }\n}\n\nLink.defaultProps = {\n  style: {\n    strokeWidth: 1.5,\n    fill: 'none',\n    stroke: 'gba(50, 50, 50, 0.2)'\n  },\n  textStyle: {\n    pointerEvents: 'none',\n    textAnchor: 'middle',\n    fill: '#333'\n  },\n  pointer: true,\n  active: true\n}\n\nLink.propTypes = {\n  id: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  style: PropTypes.object,\n  textStyle: PropTypes.object,\n  d: PropTypes.string.isRequired,\n  pointer: PropTypes.bool,\n  active: PropTypes.bool\n}\n\nexport default Link\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { scaleOrdinal } from 'd3-scale'\n\nimport Node from '../Node'\nimport Link from '../Link'\n\nclass Universe extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      ...this.props\n    }\n\n    this.getArcPath = this.getArcPath.bind(this)\n    this.getLinks = this.getLinks.bind(this)\n  }\n\n  componentWillReceiveProps (nextProps) {\n    this.setState({ ...nextProps })\n  }\n\n  getLinks (source, target) {\n    return this.state.links\n      .filter(\n        link =>\n          link.source.id === source.id &&\n          link.target.id === target.id\n      )\n      .map(l => l.type)\n  }\n\n  getArcPath (link, clockwise = true) {\n    const x1 = clockwise ? link.source.x : link.target.x\n    const y1 = clockwise ? link.source.y : link.target.y\n    const x2 = clockwise ? link.target.x : link.source.x\n    const y2 = clockwise ? link.target.y : link.source.y\n    const dx = x2 - x1\n    const dy = y2 - y1\n    const siblings = this.getLinks(link.source, link.target)\n    // const siblingCount = siblings.length\n    const siblingCount = 2\n    const xRotation = 0\n    const largeArc = 0\n\n    if (siblingCount > 1) {\n      // console.log(siblings)\n      const arcScale = scaleOrdinal()\n        .domain(siblings)\n        .range([1, siblingCount])\n      const linkIdx = arcScale(link.type)\n      let scale\n      let sweep\n      if (linkIdx === 1) {\n        sweep = 1\n        scale = 1\n        // return `M${link.source.x},${link.source.y} L${link.target.x},${link.target.y}`\n      } else if (linkIdx % 2 === 0) {\n        sweep = 0\n        scale = linkIdx / 2\n      } else if (linkIdx % 3 === 0) {\n        sweep = 1\n        scale = linkIdx / 3 + 1\n      }\n      const dr =\n        Math.sqrt(dx * dx + dy * dy) / (1 + (1 / siblingCount) * (scale - 1))\n      return `M${x1},${y1}A${dr * 1.7},${dr *\n        1.7} ${xRotation}, ${largeArc}, ${sweep} ${x2},${y2}`\n    }\n    return `M${link.source.x},${link.source.y} L${link.target.x},${link.target.y}`\n  }\n\n  render () {\n    const { nodes, links } = this.state\n    return (\n      <g\n        className={this.props.className}\n        transform={this.props.transform}\n      >\n        <g className='links'>\n          {\n            links.reduce((acc, link, idx) => {\n              if (typeof link.source === 'object' && typeof link.target === 'object') {\n                acc.push(\n                  <Link\n                    key={idx}\n                    d={this.getArcPath(link)}\n                    style={link.style}\n                    id={link.id}\n                    type={link.type}\n                    arrowOffset={link.target.radius * 1.45}\n                    active={link.active}\n                  />\n                )\n                return acc\n              }\n              return acc\n            }, [])\n          }\n        </g>\n        <g className='nodes'>\n          {\n            nodes.map((node, idx) =>\n              <Node\n                key={idx}\n                onClick={this.props.onClick}\n                onDoubleClick={this.props.onDoubleClick}\n                onMouseOver={this.props.onMouseOver}\n                onMouseOut={this.props.onMouseOut}\n                {...node}\n              />\n            )\n          }\n        </g>\n      </g>\n    )\n  }\n}\n\nUniverse.defaultProps = {\n  className: 'universe',\n  nodes: [],\n  links: []\n}\n\nUniverse.propTypes = {\n  className: PropTypes.string,\n  nodes: PropTypes.array,\n  links: PropTypes.array,\n  onMouseOver: PropTypes.func,\n  onMouseOut: PropTypes.func\n}\n\nexport default Universe\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport memoize from 'memoize-one'\nimport { select, event } from 'd3-selection'\nimport {\n  forceLink,\n  forceSimulation,\n  forceCenter,\n  forceManyBody,\n  forceCollide\n} from 'd3-force'\nimport { zoom } from 'd3-zoom'\nimport uniqBy from 'lodash.uniqby'\n\nimport Universe from './components/Universe'\n\nimport './style.css'\n\nclass NetworkGraph extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      nodes: [],\n      links: [],\n      selectedNode: null,\n      activeNodes: [],\n      simulation: this.initSimulation(),\n      width: 100,\n      height: 100,\n      transform: {\n        x: 0,\n        y: 0,\n        k: 1\n      },\n      tooltip: {\n        text: '',\n        style: {\n          opacity: 0,\n          top: 0,\n          left: 0\n        }\n      }\n    }\n    this.initSimulation = this.initSimulation.bind(this)\n    this.initZoomHandler = this.initZoomHandler.bind(this)\n    this.updateData = this.updateData.bind(this)\n    this.updateSimulation = this.updateSimulation.bind(this)\n    this.onTick = this.onTick.bind(this)\n    this.svg = React.createRef()\n    this.nodes = []\n    this.links = []\n\n    // to timit fps\n    this.interval = (1000 / this.props.fps)\n    this.millis = Date.now()\n\n    // mouseevents\n    this.mouseOverHandler = this.mouseOverHandler.bind(this)\n    this.mouseOutHandler = this.mouseOutHandler.bind(this)\n    this.clickHandler = this.clickHandler.bind(this)\n\n    // graph functions\n    this.getNeighborNodes = this.getNeighborNodes.bind(this)\n  }\n\n  componentDidMount () {\n    this.initZoomHandler()\n    this.setState({\n      width: this.svg.current.clientWidth,\n      height: this.svg.current.clientHeight\n    }, () => {\n      const updates = diff(this.nodes, this.props.nodes)\n      this.updateData(updates)\n      this.updateSimulation()\n    })\n  }\n\n  componentDidUpdate (prevProps) {\n    this.interval = (1000 / this.props.fps)\n    // should update data?\n    const updates = diff(prevProps.nodes, this.props.nodes)\n    if (updates.added.length > 0 || updates.removed.length > 0) {\n      this.updateData(updates)\n      this.updateSimulation()\n    }\n\n    // should update simulation?\n    if (\n      JSON.stringify({\n        ...prevProps,\n        nodes: null,\n        links: null,\n        children: null\n      }) !==\n      JSON.stringify({\n        ...this.props,\n        nodes: null,\n        links: null,\n        children: null\n      })\n    ) {\n      this.updateSimulation()\n    }\n  }\n\n  initSimulation () {\n    const linkForce = forceLink()\n      .id(link => link.id)\n      .strength(link => link.strength)\n      .distance(link => link.distance)\n    const simulation = forceSimulation().force('link', linkForce)\n\n    return simulation\n  }\n\n  initZoomHandler () {\n    // TODO: replace select dependency\n    // add zoom capabilities\n    const svg = select('.svgGraph')\n    const zoomHandler = zoom().on('zoom', () => {\n      this.setState({\n        transform: event.transform\n      })\n    })\n    svg.call(zoomHandler).on('dblclick.zoom', null)\n  }\n\n  updateData (diff) {\n    const { links } = this.props\n    this.links = []\n\n    // remove nodes\n    diff.removed.forEach(node => {\n      this.nodes = this.nodes.filter(\n        n => !(n.id === node.id && n.type === node.type)\n      )\n      // context.nodes.splice(context.nodes.indexOf(node))\n    })\n    // add new nodes\n    diff.added.forEach(node => this.nodes.push(node))\n\n    // bind nodes to links\n    links.forEach(link => {\n      const sourceNode = this.nodes.filter(\n        node => node.id === link.source\n      )[0]\n      const targetNode = this.nodes.filter(\n        node => node.id === link.target\n      )[0]\n      if (sourceNode && targetNode) {\n        this.links.push({\n          ...link,\n          source: sourceNode,\n          target: targetNode\n        })\n      }\n    })\n  }\n\n  updateSimulation () {\n    const {\n      attraceForceStrength,\n      chargeStrength,\n      collisionRadiusOffset,\n      collisionStrength,\n      animation,\n      velocityDecay,\n      alphaStart,\n      cluster,\n      clusterRadiusScale,\n      clusterForceStrength\n    } = this.props\n    const { simulation, height, width } = this.state\n\n    simulation\n      .nodes(this.nodes)\n      .on('tick', this.onTick)\n    simulation.force('link').links(this.links)\n    simulation\n      .force('center', forceCenter(width / 2, height / 2))\n      .force('attraceForce', forceManyBody().strength(attraceForceStrength))\n      .force('charge', forceManyBody().strength(chargeStrength))\n      .force(\n        'collision',\n        forceCollide()\n          .radius(node => node.radius + collisionRadiusOffset)\n          .strength(collisionStrength)\n      )\n\n    // Enable clustering of nodes of same type\n    if (cluster) {\n      const clusters = {}\n      const nodeTypes = uniqBy(this.nodes, 'type').map(type => type.type)\n\n      nodeTypes.forEach((type, idx, arr) => {\n        if (!clusters[type]) {\n          const radius = width > height ? height * clusterRadiusScale : width * clusterRadiusScale\n          clusters[type] = {\n            x: Math.cos((idx + 1) / arr.length * 2 * Math.PI) * radius + width / 2 + Math.random(),\n            y: Math.sin((idx + 1) / arr.length * 2 * Math.PI) * radius + height / 2 + Math.random(),\n            radius\n          }\n        }\n      })\n\n      simulation.force('cluster', alpha =>\n        applyClusterForce(alpha, this.nodes, clusters, clusterForceStrength)\n      )\n    } else {\n      simulation.force('cluster', null)\n    }\n\n    simulation\n      .alpha(alphaStart)\n      .alphaTarget(0)\n      .velocityDecay(velocityDecay)\n      .restart()\n\n    if (!animation) {\n      while (simulation.alpha() >= 0.02) {\n        simulation.tick()\n      }\n    }\n  }\n\n  onTick (e) {\n    // limit rendering\n    const currentTime = Date.now()\n    if (currentTime - this.millis > this.interval) {\n      this.millis = currentTime\n      this.setState({\n        nodes: this.nodes,\n        links: this.links\n      })\n    }\n  }\n\n  mouseOutHandler () {\n    this.setState({\n      tooltip: {\n        style: {\n          opacity: 0\n        }\n      }\n    })\n  }\n\n  mouseOverHandler (payload) {\n    const { event, type, data } = payload\n    let text = ''\n    if (type === 'NODE') {\n      text = `[${data.type}] ${data.text}`\n    } else if (type === 'LINK') {\n      text = `${data.type}`\n    }\n    this.setState({\n      tooltip: {\n        text,\n        style: {\n          opacity: 1,\n          top: event.clientY + 15,\n          left: event.clientX + 15\n        }\n      }\n    })\n  }\n\n  clickHandler (event) {\n    if (this.state.selectedNode === event.data) {\n      this.setState({\n        selectedNode: null,\n        activeNodes: []\n      })\n    } else {\n      this.setState({\n        selectedNode: event.data,\n        activeNodes: this.getNeighborNodes(event.data)\n      })\n    }\n  }\n\n  getNeighborNodes (node) {\n    return this.links.reduce(\n      (neighbors, link) => {\n        if (link.target.id === node) {\n          neighbors.push(link.source.id)\n        } else if (link.source.id === node) {\n          neighbors.push(link.target.id)\n        }\n        return neighbors\n      },\n      []\n    )\n  }\n\n  render () {\n    const { transform, tooltip, selectedNode, activeNodes } = this.state\n\n    // determine opacity of node / link based on if its selected or not\n    const nodes = this.state.nodes.map(node => ({\n      ...node,\n      active: selectedNode === null || node.id === selectedNode || activeNodes.indexOf(node.id) > -1\n    }))\n\n    const links = this.state.links.map(link => ({\n      ...link,\n      active:\n        selectedNode === null ||\n        link.source.id === selectedNode ||\n        link.target.id === selectedNode\n    }))\n\n    return (\n      <div\n        className='networkGraph'\n        style={{\n          width: '100%',\n          height: '100%'\n        }}\n      >\n        {this.props.children}\n        <svg\n          className='svgGraph'\n          width='100%'\n          height='100%'\n          ref={this.svg}\n        >\n          <Universe\n            nodes={nodes}\n            links={links}\n            transform={\n              `translate(${transform.x},${transform.y}) scale(${transform.k})`\n            }\n            onClick={this.clickHandler}\n            onDoubleClick={this.props.onDoubleClick}\n            onMouseOver={this.mouseOverHandler}\n            onMouseOut={this.mouseOutHandler}\n          />\n        </svg>\n        {/* <span className='zoomIndicator'>{parseInt(transform.k * 100, 10)} %</span> */}\n        <span\n          className='networkGrapTooltip'\n          style={tooltip.style}\n        >\n          {tooltip.text}\n        </span>\n      </div>\n    )\n  }\n}\n\n// node cluster handler\nconst applyClusterForce = (alpha, nodes, clusters, strength) => {\n  nodes.forEach(node => {\n    const cluster = clusters[node.type]\n    if (cluster.x !== node.x && cluster.y !== node.y) {\n      const k = alpha * strength\n      node.vx -= (node.x - cluster.x) * k\n      node.vy -= (node.y - cluster.y) * k\n    }\n  })\n}\n\nconst containsNode = memoize((node, nodes) =>\n  nodes.reduce((acc, n) => {\n    if (n.id === node.id) {\n      acc.push(n)\n    }\n    return acc\n  }, []).length > 0\n    ? 1\n    : 0\n)\n\nconst diff = memoize((prevNodes, newNodes) => ({\n  removed: prevNodes.filter(node => containsNode(node, newNodes) === 0),\n  added: newNodes.filter(node => containsNode(node, prevNodes) === 0)\n}))\n\nNetworkGraph.defaultProps = {\n  nodes: [],\n  links: [],\n  attraceForceStrength: 10,\n  chargeStrength: -10,\n  collisionRadiusOffset: 15,\n  collisionStrength: 0.5,\n  animation: true,\n  cluster: false,\n  fps: 60,\n  alphaStart: 1,\n  velocityDecay: 0.4,\n  clusterRadiusScale: 2,\n  clusterForceStrength: 0.3\n}\n\nNetworkGraph.propTypes = {\n  nodes: PropTypes.array,\n  links: PropTypes.array,\n  attraceForceStrength: PropTypes.number,\n  chargeStrength: PropTypes.number,\n  collisionRadiusOffset: PropTypes.number,\n  collisionStrength: PropTypes.number,\n  animation: PropTypes.bool,\n  fps: PropTypes.number,\n  alphaStart: PropTypes.number,\n  velocityDecay: PropTypes.number,\n  onClick: PropTypes.func,\n  onDoubleClick: PropTypes.func,\n  cluster: PropTypes.bool,\n  clusterRadiusScale: PropTypes.number,\n  clusterForceStrength: PropTypes.number\n}\n\nexport default NetworkGraph\n"],"sourceRoot":""}